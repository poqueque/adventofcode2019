package net.poquesoft.adventofcode

val input = 5
var output = 0

val initArray5 = arrayOf(3,225,1,225,6,6,1100,1,238,225,104,0,1002,92,42,224,1001,224,-3444,224,4,
    224,102,8,223,223,101,4,224,224,1,224,223,223,1102,24,81,225,1101,89,36,224,101,-125,224,224,4,
    224,102,8,223,223,101,5,224,224,1,224,223,223,2,118,191,224,101,-880,224,224,4,224,1002,223,8,
    223,1001,224,7,224,1,224,223,223,1102,68,94,225,1101,85,91,225,1102,91,82,225,1102,85,77,224,
    101,-6545,224,224,4,224,1002,223,8,223,101,7,224,224,1,223,224,223,1101,84,20,225,102,41,36,224,
    101,-3321,224,224,4,224,1002,223,8,223,101,7,224,224,1,223,224,223,1,188,88,224,101,-183,224,
    224,4,224,1002,223,8,223,1001,224,7,224,1,224,223,223,1001,84,43,224,1001,224,-137,224,4,224,
    102,8,223,223,101,4,224,224,1,224,223,223,1102,71,92,225,1101,44,50,225,1102,29,47,225,101,7,
    195,224,101,-36,224,224,4,224,102,8,223,223,101,6,224,224,1,223,224,223,4,223,99,0,0,0,677,0,
    0,0,0,0,0,0,0,0,0,0,1105,0,99999,1105,227,247,1105,1,99999,1005,227,99999,1005,0,256,1105,1,
    99999,1106,227,99999,1106,0,265,1105,1,99999,1006,0,99999,1006,227,274,1105,1,99999,1105,1,
    280,1105,1,99999,1,225,225,225,1101,294,0,0,105,1,0,1105,1,99999,1106,0,300,1105,1,99999,1,
    225,225,225,1101,314,0,0,106,0,0,1105,1,99999,107,677,677,224,1002,223,2,223,1006,224,329,
    1001,223,1,223,1108,226,677,224,102,2,223,223,1006,224,344,101,1,223,223,1107,226,226,224,
    1002,223,2,223,1006,224,359,101,1,223,223,8,677,226,224,1002,223,2,223,1006,224,374,1001,
    223,1,223,1107,677,226,224,102,2,223,223,1005,224,389,1001,223,1,223,1008,677,677,224,
    1002,223,2,223,1006,224,404,1001,223,1,223,108,677,677,224,102,2,223,223,1005,224,419,
    1001,223,1,223,1107,226,677,224,102,2,223,223,1006,224,434,101,1,223,223,1008,226,226,
    224,1002,223,2,223,1006,224,449,1001,223,1,223,107,226,226,224,102,2,223,223,1006,224,
    464,1001,223,1,223,1007,677,226,224,1002,223,2,223,1006,224,479,1001,223,1,223,1108,
    226,226,224,102,2,223,223,1006,224,494,1001,223,1,223,8,226,226,224,1002,223,2,223,
    1005,224,509,1001,223,1,223,7,226,677,224,102,2,223,223,1005,224,524,101,1,223,223,
    1008,677,226,224,102,2,223,223,1005,224,539,101,1,223,223,107,226,677,224,1002,223,
    2,223,1006,224,554,1001,223,1,223,1108,677,226,224,102,2,223,223,1005,224,569,101,1,
    223,223,108,226,226,224,1002,223,2,223,1005,224,584,1001,223,1,223,7,677,226,224,1002,
    223,2,223,1005,224,599,1001,223,1,223,108,226,677,224,1002,223,2,223,1006,224,614,101,1,223,
    223,1007,677,677,224,1002,223,2,223,1006,224,629,101,1,223,223,7,677,677,224,102,2,223,223,
    1005,224,644,101,1,223,223,1007,226,226,224,1002,223,2,223,1006,224,659,1001,223,1,223,8,226,
    677,224,102,2,223,223,1005,224,674,1001,223,1,223,4,223,99,226)



fun intCode5(initArray: Array<Int>): Int {
    var keepOn = true
    var i = 0
    val d = initArray.copyOf()
    d.forEach { print("$it ") }
    println("")
    while (keepOn) {
        if (d.size > i+3)
        println("Step $i:  ${d[i]} ${d[i+1]} ${d[i+2]} ${d[i+3]}")
        var l = 4
        when (d[i]) {
            1 -> d[d[i + 3]] = d[d[i + 1]] + d[d[i + 2]]
            2 -> d[d[i + 3]] = d[d[i + 1]] * d[d[i + 2]]
            3 -> { d[d[i + 1]] = input
                l = 2
            }
            4 -> {
                output = d[d[i + 1]]
                println ("OUTPUT: $output")
                l=2
            }
            5 -> {
                if (d[d[i + 1]] != 0) {
                    i=d[d[i + 2]]
                    l=0
                } else l=3
            }
            6 -> {
                if (d[d[i + 1]] == 0) {
                    i=d[d[i + 2]]
                    l=0
                } else l=3
            }
            7 -> {
                if (d[d[i + 1]] < d[d[i + 2]]) d[d[i + 3]] = 1 else d[d[i + 3]] = 0
            }
            8 -> {
                if (d[d[i + 1]] == d[d[i + 2]]) d[d[i + 3]] = 1 else d[d[i + 3]] = 0
            }
            99 -> keepOn = false
            in 100..Int.MAX_VALUE -> {
                val intStr = d[i].toString()
                val opcode = d[i] %100
                val pmode1 = if (intStr.length > 2) intStr[intStr.length-3].toString().toInt() else 0
                val pmode2 = if (intStr.length > 3) intStr[intStr.length-4].toString().toInt() else 0
                val pmode3 = if (intStr.length > 4) intStr[intStr.length-5].toInt() else 0
                val p1 = if (pmode1 == 1) d[i+1] else d[d[i+1]]
                val p2 = try{if (pmode2 == 1) d[i+2] else d[d[i+2]]} catch (e: Exception){0}
                val p3 = try{if (pmode3 == 1) d[i+3] else d[d[i+3]]} catch (e: Exception){0}
                when (opcode){
                    1 -> d[d[i+3]] = p1 + p2
                    2 -> d[d[i+3]] = p1 * p2
                    3 -> {
                        d[d[i + 1]] = input
                        l = 2
                    }
                    4 -> {
                        output = p1
                        println ("OUTPUT: $output")
                        l=2
                    }
                    5 -> {
                        if (p1 != 0) {
                            i=p2
                            l=0
                        }else l=3
                    }
                    6 -> {
                        if (p1 == 0) {
                            i=p2
                            l=0
                        }else l=3
                    }
                    7 -> {
                        if (p1 < p2) d[d[i + 3]] = 1 else d[d[i + 3]] = 0
                    }
                    8 -> {
                        if (p1 == p2) d[d[i + 3]] = 1 else d[d[i + 3]] = 0
                    }
                    99 -> keepOn = false
                }
            }
            else -> {
                keepOn = false
                println("Error: Command is ${d[i]}")
            }
        }
//        d.forEach { print("$it ") }
        println("")
        i += l
    }
    return d[0]
}


fun main() {
    intCode5(initArray5)
    //intCode5(arrayOf(3,21,1008,21,8,20,1005,20,22,107,8,21,20,1006,20,31,
     //   1106,0,36,98,0,0,1002,21,125,20,4,20,1105,1,46,104,
     //   999,1105,1,46,1101,1000,1,20,4,20,1105,1,46,98,99))
}
